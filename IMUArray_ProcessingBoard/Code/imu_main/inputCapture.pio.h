// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //
//https://people.ece.cornell.edu/land/courses/ece4760/RP2040/C_SDK_PIO_control/Input_capture/index_pio_control.html
#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// capture //
// ------- //

#define capture_wrap_target 0
#define capture_wrap 11

static const uint16_t capture_program_instructions[] = {
            //     .wrap_target
    0xe020, //  0: set    x, 0                       
    0xa029, //  1: mov    x, !x                      
    0x00c4, //  2: jmp    pin, 4                     
    0x0042, //  3: jmp    x--, 2                     
    0x0045, //  4: jmp    x--, 5                     
    0x4020, //  5: in     x, 32                      
    0x0047, //  6: jmp    x--, 7                     
    0x8000, //  7: push   noblock                    
    0x0049, //  8: jmp    x--, 9                     
    0x00cb, //  9: jmp    pin, 11                    
    0x0042, // 10: jmp    x--, 2                     
    0x0049, // 11: jmp    x--, 9                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program capture_program = {
    .instructions = capture_program_instructions,
    .length = 12,
    .origin = -1,
};

static inline pio_sm_config capture_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + capture_wrap_target, offset + capture_wrap);
    return c;
}

#endif

